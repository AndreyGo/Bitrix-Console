<?php/** * Основной класс работы Битрикс Консоли * [command] [action] [value] [params] *  * @author Andrey * */class CBConsole{	/**	 * Текущая директория	 * @var str	 * @access private	 */	var $pwd;		/**	 * Корневая папка сайта	 * @var str	 * @access public	 */	var $rootPath;		/**	 * Логин пользователя	 * @var str	 */	var $bitrixUser;		/**	 * Пароль пользоваетля	 * @var str	 */	var $bitrixPassword;		/**	 * ID сессии	 * @var str	 */	var $bitrixSession;		/**	 * Команда	 * @var str	 */	var $command;		/**	 * Действие	 * @var str	 */
	var $action;		/**	 * Значение	 * @var mixed	 */	var $value;		/**	 * Параметры	 * @var str	 */	var $params;		/**	 * Массив параметров ([параметр] => [значение])	 * @var array	 * @access private	 */	var $arParams = array();		/**	 * Результат выполнения команды	 * @var str	 */	var $output;		/**	 * Присланная строка	 * @var str	 */	var $strValue;		/**	 * Версия текущей консоли	 */	var $version = '1.0.0b';		/**	 * История команд	 */	var $arHistory = array();		/**	 * Переменные окружения	 */	var $arEnvironment = array();		/**	 * Конструктор	 */	function CBConsole()	{ 				$this->pwd = $this->getPwd();		$this->rootPath = $_SERVER['DOCUMENT_ROOT'];		$this->bitrixUser = ''; // Пригодится при работе через консоль		$this->bitrixPassword = ''; // Пригодится при работе через консоль		$this->bitrixSession = ''; // Пригодится при работе через консоль		$this->command = '';		$this->action = ''; 		$this->value = ''; 		$this->params = ''; 		$this->arParams = array();				$this->strValue = ''; // Присланная строка, как есть )		$this->output = '';		$this->loadHistory();			$this->loadEnv();	}		/**	 * Главный метод класса, который выполняет строку :)	 * @param str $strValue	 */	function run($strValue)	{				// Запоминаем команду и чистим её		$this->strValue = trim($strValue);			// Если команда пустая то выходим		if ($this->strValue == '') {			return '';		}				// Добавляем команду в историю
		$this->saveHistory();				// Думаем что у нас строка без ошибок		$this->setEnv('LAST_ERROR','N');				// Парсим строку 		$this->parseCmd();						// Далее необходимы выяснить, присланная команда принадлежит системным командам или нет		// Подключаем класс с дефолтовыми командами		require dirname(__FILE__) . '/system.php';				// Проверяем наличие нуобходимого нам класса		if (!class_exists('CSystemCMD')) {			$this->out('Ошибка работы модуля, не найден системный класс "CSystemCMD".');			return ;		}								// Проверяем, команда дефолтовая или нет		$obSystem = new CSystemCMD();		if (method_exists($obSystem,'cmd_'.$this->command)) {			if ($this->action == 'help') {				$help = getHelpText($this->command);
				$this->out($help);
				return ;			}			call_user_method('cmd_'.$this->command, $obSystem);			return '';		}				// Все остальные команды будут выполнятся отедльными скриптами		$libraryFile = CONSOLE_LIBRARY_PATH . 'cmd_' . $this->command . '.php';		if (file_exists($libraryFile)) {			if ($this->action == '') {				$this->errorOut('Missing parameters');				return;			} elseif ($this->action == 'help') {				$help = getHelpText($this->command);				$this->out($help);				return ;			}			include $libraryFile;			if (!class_exists('CCMD'.$this->command)) {				$this->errorOut('Error. Command class not found.');				return ;			}			$commandClass = 'CCMD'.$this->command;			$obCommand = new $commandClass(); 			if (!method_exists($obCommand, 'cmd_'.$this->action)) {				$this->errorOut('Invalid parameters');				return ;			}						call_user_method('cmd_'.$this->action, $obCommand);			return ;		} 				$this->errorOut('Unknown command "'.$this->command.'".');		return;	}		/**	 * Запуск команд из файла	 * @param str $strBatch	 * @param bool $logging	 */	function runBatch($strBatch,$logging = true)	{		$arCommands = explode("\n", $strBatch);		$result = '';		foreach ($arCommands as $i => $cmd) {			$this->run($cmd);						if ($logging && trim($this->output) != '') {				$result .= $this->output . "\n\n";				$this->output = '';			}						if ($this->getEnv('LAST_ERROR','N') == 'Y') {				$result .= "Last command error. Batch import stopped.";  				$this->errorOut($result);				return ;			}		}		$this->out($result);	}		/**	 * Вывод без ошибок	 * @param str $value	 */	function out($value)	{		$this->setEnv('LAST_RESULT',trim($value)); 		$this->output = $value;	}		/**	 * Вывод с ошибкой	 * @param str $value	 */	function errorOut($value)	{		$this->setEnv('LAST_ERROR','Y');
		$this->out($value);					}	/**	 * Сохраняем историю команд	 */	function saveHistory()	{		$this->arHistory[] = $this->strValue;				if (count($_SESSION['CONSOLE']['HISTORY']) > 100) {			$_SESSION['CONSOLE']['HISTORY'] = array();		}		$_SESSION['CONSOLE']['HISTORY'] = $this->arHistory;	}		/**	 * Очищаем историю команд	 */	function clearHistory()	{		$_SESSION['CONSOLE']['HISTORY'] = $this->arHistory = array();	}		/**	 * Считываем историю из сессии	 */	function loadHistory()	{		$this->arHistory = array();				if (isset($_SESSION['CONSOLE']['HISTORY'])) {			$this->arHistory = $_SESSION['CONSOLE']['HISTORY'];		}	}		/**	 * Сохраняем адрес текущей папки	 */	function savePwd()	{		$_SESSION['CONSOLE']['PWD'] = $this->pwd;	}	/**	 * Смена текущей папки	 * @param str $pwd	 */	function changePwd($pwd)	{		$_SESSION['CONSOLE']['PWD'] = $this->pwd = $pwd;	}		/**	 * Возвращает текущую папку	 */	function getPwd()	{		return isset($_SESSION['CONSOLE']['PWD']) && $_SESSION['CONSOLE']['PWD'] != '' ? $_SESSION['CONSOLE']['PWD'] : '/'; 	}		/**	 * Возвращает полный путь к текущей папке	 * Если указан параметр то он будет дописан в конце пути	 * @param str $path	 */	function currentPath($path = '')	{				if ($path[0] == '/') {			return $this->rootPath . $path;		} else {			return $this->rootPath . $this->pwd . $path;				}	}		/**	 * Поиск параметра, если паарметр не найден то возвращается $default	 * Если указан параметр $del то найденный параметр будет удалён	 * @param str $param	 * @param str $default	 * @param bool $del	 */	function getParam($param,$default,$del = false)	{		if (isset($this->arParams[$param])) {			$v = $this->arParams[$param];			if ($del === true) {				unset($this->arParams[$param]);			}			return $v;		} else {			return $default;		}	}		/**	 * Возвращает параметры массива в виде строки описания массива	 * @param array $value	 */	function getParamsAsArray($value = NULL)	{		if (is_array($value)) {			return var_export($value,true);		} else {			return var_export($this->arParams,true);		}	}		/**	 * Возвращает параметры в виде строки описания паарметрво для массива	 * @param array $value	 */	function getParamsAsArrayParams($value = null)	{		$result = '';		if (!is_array($value)) {			$value = $this->arParams;		}		foreach ($value as $key => $param) {			$result .= $key . ' => "' .$param.'"'."\n";		}		return $result;	}		/**	 * Задаёт значение новой переменной окружения	 * Переменные окружения (некоторые):
	 * LAST_RESULT - Текст предыдущего результата	 * LAST_ERROR - Ошибка работы предыдущей команды
	 * LAST_SECTION_NAME - Название предыдущего созданного раздела
	 * LAST_IBLOCK_ID - ID предыдущего созданного инфоблока
	 * LAST_IBLOCK_SECTION_ID - ID предыдущего созданного раздела инфоблока
	 * LAST_IBLOCK_ELEMENT_ID - ID предыдущего созданного элемента инфоблока	 * 	 * @param str $name	 * @param mixed $value
	 */	function setEnv($name,$value)	{		$_SESSION['CONSOLE']['ENVIRONMENT'][$name] = $this->arEnvironment[$name] = $value;	}		/**	 * Возвращает значение переменной окружения	 * @param str $name	 * @param mixed $default	 */	function getEnv($name,$default = null)	{		return isset($this->arEnvironment[$name]) ? $this->arEnvironment[$name] : $default; 	}		/**	 * Загружаем переменные окружения	 */	function loadEnv()	{		$this->arEnvironment = (array)$_SESSION['CONSOLE']['ENVIRONMENT'];	}		/**	 * Парсинг строки. Разбиваем строку на команды	 * Синтаксис строки следующий:	 * [command] [action] [value] -[params1]=[value1] -[paramsN]=[valueN]	 * Пример:	 * page create new.php -title="Новая страница"	 * section create /news/ -title="Новости сайта"	 * В некоторых случаях параметры могут использоваться иначе	 * cd news - Смена текущей директории	 * mkdir new_folder - Создание новой директории	 */	function parseCmd()	{		preg_match_all('#([a-z0-9_\/.<>^]+)|(-([a-z0-9-_]+)="?(.*)"?)#i', $this->strValue.' ', $params);				if (isset($params[0][0])) {			$this->command = $params[0][0];		}				if (isset($params[0][1])) {
			$this->action = $params[0][1]; 
		}				if (isset($params[0][2])) {
			$this->value = $params[0][2];
		}						if (isset($params[0][3])) {
			$this->params = $params[0][3];
		} elseif (isset($params[0][2]) && substr_count($params[0][2], '-')) {
			$this->params = $params[0][2];
		} else {			$this->params = '';		} 						if (trim($this->params) != '') {
			preg_match_all('/-([A-Za-z0-9-_]+)=([a-zA-Z0-9-,.\/]+) |-([A-Za-z0-9-_]+)="(.*)"/USi',$this->params, $_params);
			for ($i=0;$i<=count($_params[0])-1; $i++)
			{
				$p = trim($_params[1][$i]);
				if ($p == '') {
					$p = trim($_params[3][$i]);
					$v = trim($_params[4][$i]);
				} else {
					$v = trim($_params[2][$i]);
				}
			
				$this->arParams[$p] = $v;
			}
		}	}}?>